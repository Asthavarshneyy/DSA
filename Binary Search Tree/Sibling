/*Problem statement:
Given a binary tree print all nodes that donâ€™t have a sibling

Input Format
Enter the values of all the nodes in the binary tree in pre-order format where true suggest the node exists and false suggests it is NULL

Constraints
None

Output Format
Display all the nodes which do not have a sibling in a space separated manner

Sample Input
50 true 12 true 18 false false false false
Sample Output
12 18*/

Solution:
  #include<bits/stdc++.h>
using namespace std;

class node{
	public: 
	int data;
	node *left;
	node *right;
	//constructor
	node(int data)
	{
		this->data=data;
		left=NULL;
		right=NULL;

	}
};

void buildtree(node *&root)
{
	int d;
	string left, right;
	cin>>d;
	root=new node(d);
	cin>>left;
	if(left=="true")
	 buildtree(root->left);
	cin>>right;
	if(right=="true")
	 buildtree(root->right);
}

node* takeinput()
{
	node *root;
	buildtree(root);
	return root;
}

void sibling(node *root)
{
	if(root->left==NULL && root->right==NULL)
	 return;
	if(root->left!=NULL && root->right==NULL)
	{
		cout<<root->left->data<<" ";
		sibling(root->left);
	}
	else if(root->left==NULL && root->right!=NULL)
	{
		cout<<root->right->data<<" ";
		sibling(root->right);
	}
	else
	{
		sibling(root->left);
		sibling(root->right);
	}
}

int main() {
	node *root=takeinput();
	//function call for the main task
	sibling(root);
	
}
