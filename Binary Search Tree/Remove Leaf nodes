/*Problem Statement:
Given a binary tree, remove all the leaves from the tree

Input Format
Enter the value of the nodes of the tree

Constraints
None

Output Format
Display the tree in which all the leaves have been removed in pre-order traversal in the following format :
Left->data => Root->data <= Right->Data
Output END if left or right node is NULL

Sample Input
50 true 12 true 18 false false false false
Sample Output
12 => 50 <= END
END => 12 <= END*/


Solution:
 #include<bits/stdc++.h>
using namespace std;

class node{
	public: 
	int data;
	node *left;
	node *right;
	//constructor
	node(int data)
	{
		this->data=data;
		left=NULL;
		right=NULL;

	}
};

void buildtree(node *&root)
{
	int d;
	string left, right;
	cin>>d;
	root=new node(d);
	cin>>left;
	if(left=="true")
	 buildtree(root->left);
	cin>>right;
	if(right=="true")
	 buildtree(root->right);
}

node* takeinput()
{
	node *root;
	buildtree(root);
	return root;
}


void print(node *root)
{
	if(root==NULL)
	 return;

	if(root->left)
	 cout<<root->left->data;
	else
	 cout<<"END";
	cout<<" => "<<root->data<<" <= ";
	if(root->right)
	 cout<<root->right->data;
	else
	 cout<<"END";
	cout<<endl;
	print(root->left);
	print(root->right);
}

void remove(node *&root)
{
	if(root->left==NULL && root->right==NULL)
	{
		root=NULL;
		return;
	}
	if(root->left)
	 remove(root->left);
	if(root->right)
	 remove(root->right);
	return;
}

int main() {
	node *root=takeinput();
	//function call for the main task
	remove(root);
	print(root);
}
