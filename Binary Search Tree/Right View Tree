/*Problem Statement:
Given a binary tree , print its nodes from root to bottom as visible from right side of tree

Input Format
Level order input for the binary tree will be given.

Constraints
No of nodes in the tree can be less than or equal to 10^7

Output Format
A single line containing space separated integers representing the right view of the tree

Sample Input
1 2 3 4 5 -1 6 -1 -1 -1 -1 -1 -1
Sample Output
1 3 6
Explanation
The tree looks like

             1
          /      \
       2           3
    /     \           \
   4       5           6
When viewed from the left , we would see the nodes 1,3 and 6.*/

Solution:
#include<bits/stdc++.h>
using namespace std;

class node{
	public:
	int data;
	node *left;
	node *right;
	//constructor
	node(int data)
	{
		this->data=data;
		left=NULL;
		right=NULL;
	}
};

node* buildtree(vector <int> v, int i, int n)
{
	node *root=nullptr;
	if(i<n)
	{
        if(v[i]!=-1)
		{
            root=new node(v[i]);
            //as every root->left is at (2*i + 1) th pos in the array when root is at ith pos
            root->left=buildtree(v, 2*i+1, n);
            //as every root->right is at (2*i+2)th pos in the array when root is at ith pos
            root->right=buildtree(v, 2*i+2, n);
        }
	}
	return root;
}

vector <int> takeinput()
{
	vector <int> v;
	string s;
	getline(cin, s);
	for(int i=0;i<s.length(); i++)
	{
		if(s[i]==' ')
		 continue;
		else if(s[i]=='-')
		{
			int num=s[i+1]-'0';
			num*=-1;
			v.push_back(num);
			i++;
		}
		else
		 v.push_back(s[i]-'0');
	}
	return v;
}

void rightree(node *root, int level, int &maxlevel)
{
	if(root==NULL)
	 return;
	if(level>maxlevel)
	{
		cout<<root->data<<" ";
		maxlevel=level;
	}
	//calling the right child first
	rightree(root->right, level+1, maxlevel);
	//now the left child
	rightree(root->left, level+1, maxlevel);
}

int main() {
	//to take the input of the array
	vector <int> v=takeinput();
	//to build the tree
	node *root=buildtree(v, 0, v.size());
	//to print the right view
	int maxlevel=0;
	rightree(root, 1, maxlevel);
	return 0;
}
