/*Problem statement:
Given a Binary tree, write code to create a separate array list for each level. You should return an arraylist of arraylist.

Input Format
Enter the values of all the nodes in the binary tree in pre-order format where true suggest the node exists and false suggests it is NULL

Constraints
None

Output Format
Display the resulting arraylist of arraylist according to given sample examples.

Sample Input
50 true 12 true 18 false false true 13 false false false
Sample Output
[[50], [12], [18, 13]]*/


Solution:
#include<bits/stdc++.h>
using namespace std;

class node{
	public: 
	int data;
	node *left;
	node *right;
	//constructor
	node(int data)
	{
		this->data=data;
		left=NULL;
		right=NULL;

	}
};

void buildtree(node *&root)
{
	int d;
	string left, right;
	cin>>d;
	root=new node(d);
	cin>>left;
	if(left=="true")
	 buildtree(root->left);
	cin>>right;
	if(right=="true")
	 buildtree(root->right);
}

node* takeinput()
{
	node *root;
	buildtree(root);
	return root;
}

vector <vector<int>> arraylist(node *root)
{
	vector <vector<int>> v; // to store the arraylist of arraylists
	vector <int> level; // to store values of a particular level
	queue<node*> q; //to make a level order BT
	q.push(root);
	q.push(NULL);
	while(!q.empty())
	{
		if(q.front()==NULL)
		{
			v.push_back(level);
			level.clear();
			q.pop();
			if(!q.empty())
			 q.push(NULL);
		}
		else
		{
			node *temp=q.front();
			level.push_back(temp->data);
			if(temp->left)
			 q.push(temp->left);
			if(temp->right)
			 q.push(temp->right);
			q.pop();
		}
	}
	return v;
}

void print(vector <vector<int>> v)
{
	cout<<"[";
	for(auto x: v)
	{
		cout<<"[";
		for(auto y: x)
		{
			cout<<y;
			if(!(y==x.back()))
			 cout<<", ";
		}
		cout<<"]";
		if(!(x==v.back()))
		 cout<<", ";
	}
	cout<<"]";
}

int main() {
	node *root=takeinput();
	//function call for the main task
	vector <vector<int>> v= arraylist(root);
	print(v);
	return 0;
}
