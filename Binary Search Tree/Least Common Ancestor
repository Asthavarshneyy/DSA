/*Problem statement:
Find LCA(Lowest Common Ancestor) of two elements in a Binary Tree.

Input Format
Enter the values of all the nodes in the binary tree in pre-order format where true suggest the node exists and false suggests it is NULL next two line contains 2 element of BT

Constraints
None

Output Format
Display the LCA value.

Sample Input
10 true 20 true 40 false false true 50 false false true 30 true 60 false false true 73 false false
50
60
Sample Output
10*/

Solution:
#include<bits/stdc++.h>
using namespace std;

class node{
	public: 
	int data;
	node *left;
	node *right;
	//constructor
	node(int data)
	{
		this->data=data;
		left=NULL;
		right=NULL;
	}
};

void buildtree(node *&root) // this & is v. imp
{
	int d;
	string left;
	string right;
	cin>>d;
	root=new node(d);
	cin>>left;
	if(left=="true")
	 buildtree(root->left);
	cin>>right;
	if(right=="true")
	 buildtree(root->right);
}

node* takeinput()
{
	node *root;
	buildtree(root);
	return root;
}

node* lca(node *root, int a, int b)
{
	//base cases
	if(root==NULL)
	 return NULL;
	if(root->data==a || root->data==b)
	 return root;
	//recursive functions: postorder transversal
	node *leftnode=lca(root->left, a, b);
	node *rightnode=lca(root->right, a,b);
	//checking if we found both the elements
	if(leftnode!=NULL && rightnode!=NULL)
	 return root;
	//checking if we found either one of the elements
	if(leftnode !=NULL)
	 return leftnode;
	return rightnode;
}

int main() {
	//tree formation
	node *root=takeinput();
	//taking input of the two elements
	int a,b;
	cin>>a;
	cin>>b;
	//function call
	node *ans=lca(root, a, b);
	cout<<ans->data;
	return 0;
}
