/*Problem statement:
The stock span problem is a financial problem where we have a series of N daily price quotes for a stock and we need to calculate span of stockâ€™s price for all N days. You are given an array of length N, where ith element of array denotes the price of a stock on ith. Find the span of stock's price on ith day, for every 1<=i<=N.
A span of a stock's price on a given day, i, is the maximum number of consecutive days before the (i+1)th day, for which stock's price on these days is less than or equal to that on the ith day.

Input Format
First line contains integer N denoting size of the array.
Next line contains N space separated integers denoting the elements of the array.

Constraints
1 <= N <= 10^6

Output Format
Display the array containing stock span values.

Sample Input
5
30
35
40
38
35
Sample Output
1 2 3 1 1 END
Explanation
For the given case
for day1 stock span =1
for day2 stock span =2 (as 35>30 so both days are included in it)
for day3 stock span =3 (as 40>35 so 2+1=3)
for day4 stock span =1 (as 38<40 so only that day is included)
for day5 stock span =1 (as 35<38 so only that day is included)
hence output is 1 2 3 1 1 END*/


Solution:
#include<bits/stdc++.h>
using namespace std; 

void stocks(int price[], int N, int s[])
{
	//stack of index of elements
	stack <int> span;
	span.push(0);
	//first day stock will always have a span of 1
	s[0]=1;
	for(int i=1;i<N;i++)
	{
		//removing all the elements which are less than the curr stock
		while(!span.empty() && price[span.top()]<=price[i])
		 span.pop();
		//when no element is left in the stack 
		if(span.empty())
		 s[i]=i+1;
		//otherwise substract the idex (day number) of curr stock from the index of the last max stock i.e. the topmost element of stack
		else
		 s[i]=i-span.top();
		//Atlast push the indx of curr elemnt into the stack so now it becomes the max (or topmost element)
		span.push(i);
	}
}

void print(int s[], int N)
{
	for(int i=0;i<N;i++)
	 cout<< s[i]<<" ";
	cout<<"END";
}

int main() {
	//input
	int N;
	cin>>N; 
	int price[N];
	for(int i=0;i<N;i++)
	 cin>>price[i];
	//to store the answers
	int s[N];
	//function call
	stocks(price, N, s);
	print(s, N);
	return 0;
}
