/*Problem statement:
Given a linked list with n nodes. Find the kth element from last without computing the length of the linked list.

Input Format
First line contains space separated integers representing the node values of the linked list. The list ends when the input comes as '-1'. The next line contains a single integer k.

Constraints
n < 10^5

Output Format
Output a single line containing the node value at the kth element from last.

Sample Input
1 2 3 4 5 6 -1
3
Sample Output
4
Explanation
The linked list is 1 2 3 4 5 6. -1 is not included in the list. So the third element from the last is 4*/



Solution:
#include<bits/stdc++.h>
using namespace std;

class Node
{
	public:
	int data;
	Node *next;
	//constructor
	Node(int data)
	{
		this->data=data;
		next=NULL;
	}
};

void find(Node *head, int k)
{
	Node *fast=head;
	Node *slow=head;
	int count=0;
	//taking the fast ptr k steps ahead
	while(count!=k)
	{
		fast=fast->next;
		count++;
	}
	//taking the fast and slow pointers N-k steps frwrd
	while(fast!=NULL)
	{
		fast=fast->next;
		slow=slow->next;
	}
	cout<<slow->data;
}

int main() {
	//defining the head
	Node *head;
	Node *temp=head;
	int d;
	cin>>d;
	//input
	while(d!=-1)
	{
		temp->next=new Node(d);
		temp=temp->next; 
		cin>>d;
	}
	//position to find
	int k;
	cin>>k;
	//calling the function
	find(head, k);
	return 0;
}
