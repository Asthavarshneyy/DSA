/*
Problem Statement:
Given a linked list of N nodes. The task is to reverse this list.

Example 1:

Input:
LinkedList: 1->2->3->4->5->6
Output: 6 5 4 3 2 1
Explanation: After reversing the list, 
elements are 6->5->4->3->2->1.
Example 2:

Input:
LinkedList: 2->7->8->9->10
Output: 10 9 8 7 2
Explanation: After reversing the list,
elements are 10->9->8->7->2.
Your Task:
The task is to complete the function reverseList() with head reference as the only argument and should return new head after reversing the list.

Expected Time Complexity: O(N).
Expected Auxiliary Space: O(1).

Constraints:
1 <= N <= 104 */

Solution:
class Solution
{
    public:
    //Function to reverse a linked list.
    struct Node* reverseList(struct Node *head)
    {
        // code here
        // return head of reversed list
        Node *temp; //to store the ptr of the next node temporarily
        Node *curr=head; // where all the action takes place
        Node *prev=NULL; //storing the previous node 
        while(curr!=NULL)
        {
            //aage vale node ko save krna h as we will will pointing this curr to prev now
            temp=curr->next; 
            //now pointing curr to next i.e. reversed
            curr->next=prev;
            //moving forward on step now
            prev=curr;
            //moving the head too as we need to return head to the new head that will be formed
            head=curr;
            //ab curr next pe kaise jayega? remmber the saved temp!?
            curr=temp;
        }
        return head;
    }
    
};
